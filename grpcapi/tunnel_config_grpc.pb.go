// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: tunnel_config.proto

package grpcapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PostQuantumSecureClient is the client API for PostQuantumSecure service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PostQuantumSecureClient interface {
	// PskExchangeExperimentalV0 uses the common API defined by LibOQS.  See:
	// https://github.com/open-quantum-safe/liboqs
	// This endpoint is deprecated in favor for `PskExchangeExperimentalV1`. Please use that instead.
	PskExchangeExperimentalV0(ctx context.Context, in *PskRequestExperimentalV0, opts ...grpc.CallOption) (*PskResponseExperimentalV0, error)
	// Allows deriving a preshared key (PSK) using one or multiple PQ-secure key-encapsulation
	// mechanisms (KEM). The preshared key is added to WireGuard's preshared-key field in a new
	// ephemeral peer (PQ-peer). This makes the tunnel resistant towards attacks using
	// quantum computers.
	//
	// The VPN server associates the PQ-peer with the peer who performed the exchange. Any
	// already existing PQ-peer for the normal peer is replaced. Each normal peer can have
	// at most one PQ-peer.
	//
	// The PQ-peer is mutually exclusive to the normal peer. The server keeps both peers in memory,
	// but only one of them is loaded into WireGuard at any point in time. A handshake from the
	// normal peer unloads the corresponding PQ-peer from WireGuard and vice versa.
	//
	// A new peer is negotiated for PQ to avoid a premature break of the tunnel used for negotiation.
	// A tunnel would break prematurely if the preshared key is applied before the normal peer
	// received the server's contribution to the KEM exchange. This cannot occur now because
	// the client decides when to switch to the PQ-secure tunnel. This design also allows
	// the client to switch back to using a non-PQ-secure tunnel at any point.
	//
	// The negotiated PQ-peer is ephemeral. The server gives no guarantees how long it will be
	// valid and working. The client should negotiate a new PQ-peer every time it establishes a new
	// tunnel to the server.
	//
	// The full exchange requires just a single request-response round trip between the VPN client
	// and the VPN server.
	//
	// # Request-response format
	//
	// The request from the VPN client contains:
	//   - `wg_pubkey` - The public key used by the current tunnel (that the request travels inside).
	//   - `wg_psk_pubkey` - A newly generated ephemeral WireGuard public key for the PQ-peer.
	//     The server will associate the derived PSK with this public key.
	//   - `kem_pubkeys` - A list describing the KEM algorithms. Must have at least one entry.
	//     The same KEM must not be listed more than once. Each list item contains:
	//   - `algorithm_name` - The name of the KEM, including which variant. Should be the same
	//     name/format that `liboqs` uses.
	//   - `key_data` - The client's public key for this KEM. Will be used by the server to
	//     encapsulate the shared secret for this KEM.
	//
	// The response from the VPN server contains:
	//   - `ciphertexts` - A list of the ciphertexts (the encapsulated shared secrets) for all
	//     public keys in `kem_pubkeys` in the request, in the same order as in the request.
	//
	// # Deriving the WireGuard PSK
	//
	// The PSK to be used in WireGuard's preshared-key field is computed by XORing the resulting
	// shared secrets of all the KEM algorithms. All currently supported and planned to be
	// supported algorithms output 32 bytes, so this is trivial.
	//
	// Since the PSK provided to WireGuard is directly fed into a HKDF, it is not important that
	// the entropy in the PSK is uniformly distributed. The actual keys used for encrypting the
	// data channel will have uniformly distributed entropy anyway, thanks to the HKDF.
	// But even if that was not true, since both CME and Kyber run SHAKE256 as the last step
	// of their internal key derivation, the output they produce are uniformly distributed.
	//
	// If we later want to support another type of KEM that produce longer or shorter output,
	// we can hash that secret into a 32 byte hash before proceeding to the XOR step.
	//
	// Mixing with XOR (A = B ^ C) is fine since nothing about A is revealed even if one of B or C
	// is known. Both B *and* C must be known to compute any bit in A. This means all involved
	// KEM algorithms must be broken before the PSK can be computed by an attacker.
	PskExchangeExperimentalV1(ctx context.Context, in *PskRequestExperimentalV1, opts ...grpc.CallOption) (*PskResponseExperimentalV1, error)
}

type postQuantumSecureClient struct {
	cc grpc.ClientConnInterface
}

func NewPostQuantumSecureClient(cc grpc.ClientConnInterface) PostQuantumSecureClient {
	return &postQuantumSecureClient{cc}
}

func (c *postQuantumSecureClient) PskExchangeExperimentalV0(ctx context.Context, in *PskRequestExperimentalV0, opts ...grpc.CallOption) (*PskResponseExperimentalV0, error) {
	out := new(PskResponseExperimentalV0)
	err := c.cc.Invoke(ctx, "/tunnel_config.PostQuantumSecure/PskExchangeExperimentalV0", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postQuantumSecureClient) PskExchangeExperimentalV1(ctx context.Context, in *PskRequestExperimentalV1, opts ...grpc.CallOption) (*PskResponseExperimentalV1, error) {
	out := new(PskResponseExperimentalV1)
	err := c.cc.Invoke(ctx, "/tunnel_config.PostQuantumSecure/PskExchangeExperimentalV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PostQuantumSecureServer is the server API for PostQuantumSecure service.
// All implementations must embed UnimplementedPostQuantumSecureServer
// for forward compatibility
type PostQuantumSecureServer interface {
	// PskExchangeExperimentalV0 uses the common API defined by LibOQS.  See:
	// https://github.com/open-quantum-safe/liboqs
	// This endpoint is deprecated in favor for `PskExchangeExperimentalV1`. Please use that instead.
	PskExchangeExperimentalV0(context.Context, *PskRequestExperimentalV0) (*PskResponseExperimentalV0, error)
	// Allows deriving a preshared key (PSK) using one or multiple PQ-secure key-encapsulation
	// mechanisms (KEM). The preshared key is added to WireGuard's preshared-key field in a new
	// ephemeral peer (PQ-peer). This makes the tunnel resistant towards attacks using
	// quantum computers.
	//
	// The VPN server associates the PQ-peer with the peer who performed the exchange. Any
	// already existing PQ-peer for the normal peer is replaced. Each normal peer can have
	// at most one PQ-peer.
	//
	// The PQ-peer is mutually exclusive to the normal peer. The server keeps both peers in memory,
	// but only one of them is loaded into WireGuard at any point in time. A handshake from the
	// normal peer unloads the corresponding PQ-peer from WireGuard and vice versa.
	//
	// A new peer is negotiated for PQ to avoid a premature break of the tunnel used for negotiation.
	// A tunnel would break prematurely if the preshared key is applied before the normal peer
	// received the server's contribution to the KEM exchange. This cannot occur now because
	// the client decides when to switch to the PQ-secure tunnel. This design also allows
	// the client to switch back to using a non-PQ-secure tunnel at any point.
	//
	// The negotiated PQ-peer is ephemeral. The server gives no guarantees how long it will be
	// valid and working. The client should negotiate a new PQ-peer every time it establishes a new
	// tunnel to the server.
	//
	// The full exchange requires just a single request-response round trip between the VPN client
	// and the VPN server.
	//
	// # Request-response format
	//
	// The request from the VPN client contains:
	//   - `wg_pubkey` - The public key used by the current tunnel (that the request travels inside).
	//   - `wg_psk_pubkey` - A newly generated ephemeral WireGuard public key for the PQ-peer.
	//     The server will associate the derived PSK with this public key.
	//   - `kem_pubkeys` - A list describing the KEM algorithms. Must have at least one entry.
	//     The same KEM must not be listed more than once. Each list item contains:
	//   - `algorithm_name` - The name of the KEM, including which variant. Should be the same
	//     name/format that `liboqs` uses.
	//   - `key_data` - The client's public key for this KEM. Will be used by the server to
	//     encapsulate the shared secret for this KEM.
	//
	// The response from the VPN server contains:
	//   - `ciphertexts` - A list of the ciphertexts (the encapsulated shared secrets) for all
	//     public keys in `kem_pubkeys` in the request, in the same order as in the request.
	//
	// # Deriving the WireGuard PSK
	//
	// The PSK to be used in WireGuard's preshared-key field is computed by XORing the resulting
	// shared secrets of all the KEM algorithms. All currently supported and planned to be
	// supported algorithms output 32 bytes, so this is trivial.
	//
	// Since the PSK provided to WireGuard is directly fed into a HKDF, it is not important that
	// the entropy in the PSK is uniformly distributed. The actual keys used for encrypting the
	// data channel will have uniformly distributed entropy anyway, thanks to the HKDF.
	// But even if that was not true, since both CME and Kyber run SHAKE256 as the last step
	// of their internal key derivation, the output they produce are uniformly distributed.
	//
	// If we later want to support another type of KEM that produce longer or shorter output,
	// we can hash that secret into a 32 byte hash before proceeding to the XOR step.
	//
	// Mixing with XOR (A = B ^ C) is fine since nothing about A is revealed even if one of B or C
	// is known. Both B *and* C must be known to compute any bit in A. This means all involved
	// KEM algorithms must be broken before the PSK can be computed by an attacker.
	PskExchangeExperimentalV1(context.Context, *PskRequestExperimentalV1) (*PskResponseExperimentalV1, error)
	mustEmbedUnimplementedPostQuantumSecureServer()
}

// UnimplementedPostQuantumSecureServer must be embedded to have forward compatible implementations.
type UnimplementedPostQuantumSecureServer struct {
}

func (UnimplementedPostQuantumSecureServer) PskExchangeExperimentalV0(context.Context, *PskRequestExperimentalV0) (*PskResponseExperimentalV0, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PskExchangeExperimentalV0 not implemented")
}
func (UnimplementedPostQuantumSecureServer) PskExchangeExperimentalV1(context.Context, *PskRequestExperimentalV1) (*PskResponseExperimentalV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PskExchangeExperimentalV1 not implemented")
}
func (UnimplementedPostQuantumSecureServer) mustEmbedUnimplementedPostQuantumSecureServer() {}

// UnsafePostQuantumSecureServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PostQuantumSecureServer will
// result in compilation errors.
type UnsafePostQuantumSecureServer interface {
	mustEmbedUnimplementedPostQuantumSecureServer()
}

func RegisterPostQuantumSecureServer(s grpc.ServiceRegistrar, srv PostQuantumSecureServer) {
	s.RegisterService(&PostQuantumSecure_ServiceDesc, srv)
}

func _PostQuantumSecure_PskExchangeExperimentalV0_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PskRequestExperimentalV0)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostQuantumSecureServer).PskExchangeExperimentalV0(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tunnel_config.PostQuantumSecure/PskExchangeExperimentalV0",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostQuantumSecureServer).PskExchangeExperimentalV0(ctx, req.(*PskRequestExperimentalV0))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostQuantumSecure_PskExchangeExperimentalV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PskRequestExperimentalV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostQuantumSecureServer).PskExchangeExperimentalV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tunnel_config.PostQuantumSecure/PskExchangeExperimentalV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostQuantumSecureServer).PskExchangeExperimentalV1(ctx, req.(*PskRequestExperimentalV1))
	}
	return interceptor(ctx, in, info, handler)
}

// PostQuantumSecure_ServiceDesc is the grpc.ServiceDesc for PostQuantumSecure service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PostQuantumSecure_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tunnel_config.PostQuantumSecure",
	HandlerType: (*PostQuantumSecureServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PskExchangeExperimentalV0",
			Handler:    _PostQuantumSecure_PskExchangeExperimentalV0_Handler,
		},
		{
			MethodName: "PskExchangeExperimentalV1",
			Handler:    _PostQuantumSecure_PskExchangeExperimentalV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tunnel_config.proto",
}
